import { render } from "@testing-library/react";
import routes from "@src/config/routes";
import checkMockCall from "@src/fixtures/mocks/mock.component.call";
import Page, { getStaticProps } from "@src/pages/404";
import { mockIsBuildTime } from "@src/vendors/integrations/web.framework/__mocks__/vendor.mock";
import {
  mockStaticProps,
  mockUtilities,
} from "@src/vendors/integrations/web.framework/__mocks__/vendor.ssr.mock";
import Events from "@src/web/analytics/collection/events/definitions";
import ErrorBoundaryContainer from "@src/web/ui/errors/components/boundary/error.boundary.container";
import ErrorDisplayContainer from "@src/web/ui/errors/components/display/error.display.container";

jest.mock("@src/web/navigation/routing/hooks/router.hook");

jest.mock("@src/vendors/integrations/web.framework/vendor.ssr");

jest.mock("@src/vendors/integrations/web.framework/vendor");

jest.mock(
  "@src/web/ui/errors/components/boundary/error.boundary.container",
  () => require("@fixtures/react/parent").createComponent("ErrorBoundary")
);

jest.mock("@src/web/ui/errors/components/display/error.display.container", () =>
  require("@fixtures/react/parent").createComponent("ErrorDisplayContainer")
);

describe("getStaticProps", () => {
  it("should be the return value of staticProps", () => {
    expect(getStaticProps).toBe(mockStaticProps);
  });

  it("should be generated by a correct call to staticProps", () => {
    expect(mockUtilities.staticProps).toHaveBeenCalledTimes(1);
    expect(mockUtilities.staticProps).toHaveBeenCalledWith({
      pageKey: "default",
    });
  });
});

describe("404", () => {
  const arrange = () => {
    render(<Page />);
  };

  beforeEach(() => jest.clearAllMocks());

  describe("when rendered at build time", () => {
    beforeEach(() => {
      mockIsBuildTime.mockReturnValue(true);

      arrange();
    });

    it("should NOT call the ErrorBoundary component", () => {
      expect(ErrorBoundaryContainer).toHaveBeenCalledTimes(0);
    });

    it("should NOT call the ErrorDisplay component", () => {
      expect(ErrorDisplayContainer).toHaveBeenCalledTimes(0);
    });
  });

  describe("when rendered at run time", () => {
    beforeEach(() => {
      mockIsBuildTime.mockReturnValue(false);

      arrange();
    });

    it("should call the ErrorBoundary correctly", () => {
      expect(ErrorBoundaryContainer).toHaveBeenCalledTimes(1);
      checkMockCall(
        ErrorBoundaryContainer,
        {
          route: routes.home,
          eventDefinition: Events.General.Error,
        },
        0,
        ["stateReset"]
      );
    });

    it("should call the ErrorDisplay correctly", () => {
      expect(ErrorDisplayContainer).toHaveBeenCalledTimes(1);
      checkMockCall(ErrorDisplayContainer, { errorKey: "404" }, 0, [
        "handleClick",
      ]);
    });
  });
});
