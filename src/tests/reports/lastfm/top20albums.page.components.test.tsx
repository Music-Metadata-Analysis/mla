import { render } from "@testing-library/react";
import ReportPage from "@src/components/reports/lastfm/common/report.page/report.page";
import Top20AlbumReport from "@src/components/reports/lastfm/top20.albums/top20.albums.container";
import routes from "@src/config/routes";
import FourOhFour from "@src/pages/404";
import Page, {
  getServerSideProps,
} from "@src/pages/reports/lastfm/top20albums";
import mockCheckCall from "@src/tests/fixtures/mock.component.call";
import {
  mockServerSideProps,
  mockUtilities,
} from "@src/vendors/integrations/web.framework/__mocks__/vendor.ssr.mock";

jest.mock("@src/vendors/integrations/web.framework/vendor.ssr");

jest.mock("@src/components/reports/lastfm/common/report.page/report.page", () =>
  require("@fixtures/react/parent").createComponent("ReportPage")
);

jest.mock(
  "@src/components/reports/lastfm/top20.albums/top20.albums.container",
  () => require("@fixtures/react/parent").createComponent("Top20AlbumReport")
);

jest.mock("@src/pages/404", () =>
  require("@fixtures/react/parent").createComponent("FourOhFour")
);

describe("getServerSideProps", () => {
  it("should be the return value of serverSideProps", () => {
    expect(getServerSideProps).toBe(mockServerSideProps);
  });

  it("should be generated by a correct call to serverSideProps", () => {
    expect(mockUtilities.serverSideProps).toBeCalledTimes(1);
    expect(mockUtilities.serverSideProps).toBeCalledWith({
      pageKey: "lastfm",
      translations: ["cards", "lastfm"],
    });
  });
});

describe(routes.reports.lastfm.top20albums, () => {
  beforeEach(() => jest.clearAllMocks());

  const arrange = () => {
    render(<Page />);
  };

  describe("when rendered", () => {
    beforeEach(() => {
      arrange();
    });

    it("should call the ReportPage correctly", () => {
      expect(ReportPage).toBeCalledTimes(1);
      mockCheckCall(
        ReportPage,
        {
          ReportContainer: Top20AlbumReport,
          NoUserComponent: FourOhFour,
        },
        0,
        ["stateReset"]
      );
    });
  });
});
