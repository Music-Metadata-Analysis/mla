import { render } from "@testing-library/react";
import routes from "@src/config/routes";
import checkMockCall from "@src/fixtures/mocks/mock.component.call";
import Page, { getServerSideProps } from "@src/pages/legal/terms";
import {
  mockServerSideProps,
  mockUtilities,
} from "@src/vendors/integrations/web.framework/__mocks__/vendor.ssr.mock";
import Events from "@src/web/analytics/collection/events/definitions";
import TermsOfServiceContainer from "@src/web/content/terms/components/terms.container";
import ErrorBoundaryContainer from "@src/web/ui/errors/components/boundary/error.boundary.container";

jest.mock("@src/vendors/integrations/web.framework/vendor.ssr");

jest.mock(
  "@src/web/ui/errors/components/boundary/error.boundary.container",
  () => require("@fixtures/react/parent").createComponent("ErrorBoundary")
);

jest.mock("@src/web/content/terms/components/terms.container", () =>
  require("@fixtures/react/parent").createComponent("TermsOfServiceContainer")
);

describe("getServerSideProps", () => {
  it("should be the return value of serverSideProps", () => {
    expect(getServerSideProps).toBe(mockServerSideProps);
  });

  it("should be generated by a correct call to serverSideProps", () => {
    expect(mockUtilities.serverSideProps).toHaveBeenCalledTimes(1);
    expect(mockUtilities.serverSideProps).toHaveBeenCalledWith({
      pageKey: "terms",
      translations: ["legal"],
    });
  });
});

describe("Terms", () => {
  const arrange = () => {
    render(<Page />);
  };

  beforeEach(() => jest.clearAllMocks());

  describe("when rendered", () => {
    beforeEach(() => arrange());

    it("should call the ErrorBoundary component correctly", () => {
      expect(ErrorBoundaryContainer).toHaveBeenCalledTimes(1);
      checkMockCall(
        ErrorBoundaryContainer,
        {
          route: routes.home,
          eventDefinition: Events.General.Error,
        },
        0,
        ["stateReset"]
      );
    });

    it("should call the TermsOfService component", () => {
      expect(TermsOfServiceContainer).toHaveBeenCalledTimes(1);
      checkMockCall(TermsOfServiceContainer, {});
    });
  });
});
