---
name: Music Analytics Project CI/CD

# CI_ENVIRONMENT_CONTENT            - Environment file content for the ci environment
# STAGE_ENVIRONMENT_CONTENT         - Environment file content for the ci environment
# STAGE_NETLIFY_SITE_ID            - Netlify Stage Site ID
# PRODUCTION_ENVIRONMENT_CONTENT    - Environment file content for the ci environment
# PRODUCTION_NETLIFY_SITE_ID        - Netlify Production Site ID

on:
  push:
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:

env:
  STAGE_NETLIFY_NAME: "stage-mla"
  PRODUCTION_NETLIFY_NAME: "production-mla"
  PROJECT_NAME: "mla"
  INTEGRATION_TEST_LAST_FM_KEY: ${{ secrets.INTEGRATION_TEST_LAST_FM_KEY }}
  NETLIFY_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
  NETLIFY_CLI: netlify-cli
  NODE_VERSION: 16

jobs:
  architecture:
    runs-on: ubuntu-latest
    steps:
      - name: Architecture Enforcement -- Checkout Repository
        uses: actions/checkout@v3

      - name: Architecture Enforcement -- Setup Node
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: ${{ env.NODE_VERSION }}

      - name: Architecture Enforcement -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Architecture Enforcement -- Run Global Enforcement Script
        run: |
          source .github/scripts/architecture.sh

      - name: Architecture Enforcement -- Report Job Status
        if: ${{ failure() }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: architecture enforcement check has failed!"

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Build -- Setup Environment
        uses: actions/checkout@v3

      - name: Build -- Setup Node
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: ${{ env.NODE_VERSION }}

      - name: Build -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Build -- Install Node Modules
        run: |
          npm install

      - name: Build -- Append CI Environment Content
        run: |
          echo "${CI_ENVIRONMENT_CONTENT}" > .env.test
        env:
          CI_ENVIRONMENT_CONTENT: ${{ secrets.CI_ENVIRONMENT_CONTENT }}

      - name: Build -- Unit Tests and Coverage
        run: |
          npm run coverage

      - name: Build -- Report Job Status
        if: ${{ failure() }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error during build!"

  deploy_production:
    needs: [success_notification]

    runs-on: ubuntu-latest

    steps:
      - name: Deploy Production -- Checkout Repository
        if: github.ref == 'refs/heads/production'
        uses: actions/checkout@v3

      - name: Deploy Production -- Setup Node
        if: github.ref == 'refs/heads/production'
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: ${{ env.NODE_VERSION }}

      - name: Deploy Production -- Setup Environment
        if: github.ref == 'refs/heads/production'
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Deploy Production -- Report Intention to Deploy
        if: github.ref == 'refs/heads/production'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":warning: beginning production deployment!"

      - name: Build -- Append Production Environment Content
        if: github.ref == 'refs/heads/production'
        run: |
          echo "${PRODUCTION_ENVIRONMENT_CONTENT}" > .env.local
        env:
          PRODUCTION_ENVIRONMENT_CONTENT: ${{ secrets.PRODUCTION_ENVIRONMENT_CONTENT }}

      - name: Deploy Production -- Trigger Netlify API
        if: github.ref == 'refs/heads/production'
        run: |
          npm install --unsafe-perm=true ${NETLIFY_CLI} -g
          npm install
          netlify deploy --build --prod -s ${NETLIFY_SITE_ID}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.PRODUCTION_NETLIFY_SITE_ID }}

      - name: Deploy Production -- Report Job Status on Success
        if: github.ref == 'refs/heads/production'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: deployed https://${PRODUCTION_NETLIFY_NAME}.netlify.app"

      - name: Deploy Production -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error deploying branch!"

  deploy_stage:
    needs: [success_notification]

    runs-on: ubuntu-latest

    steps:
      - name: Deploy Stage -- Checkout Repository
        if: github.ref == 'refs/heads/master'
        uses: actions/checkout@v3

      - name: Deploy Stage -- Setup Node
        if: github.ref == 'refs/heads/master'
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: ${{ env.NODE_VERSION }}

      - name: Deploy Stage -- Setup Environment
        if: github.ref == 'refs/heads/master'
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Build -- Append Stage Environment Content
        run: |
          echo "${STAGE_ENVIRONMENT_CONTENT}" > .env.local
        env:
          STAGE_ENVIRONMENT_CONTENT: ${{ secrets.STAGE_ENVIRONMENT_CONTENT }}

      - name: Deploy Stage -- Trigger Netlify API
        if: github.ref == 'refs/heads/master'
        run: |
          npm install --unsafe-perm=true ${NETLIFY_CLI} -g
          npm install
          netlify deploy --build --prod -s ${NETLIFY_SITE_ID}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.STAGE_NETLIFY_SITE_ID }}

      - name: Deploy Stage -- Report Job Status on Success
        if: github.ref == 'refs/heads/master'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: deployed https://${STAGE_NETLIFY_NAME}.netlify.app"

      - name: Deploy Stage -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error deploying branch!"

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Lint -- Checkout Repository
        uses: actions/checkout@v3

      - name: Lint -- Setup Node
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: ${{ env.NODE_VERSION }}

      - name: Lint -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Lint -- Install Node Modules
        run: |
          npm install

      - name: Lint -- Run Linter
        run: |
          npm run lint

      - name: Lint -- Report Job Status
        if: ${{ failure() }}
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: lint check has failed!"

  security_test:
    runs-on: ubuntu-latest

    steps:
      - name: Security Test -- Checkout Repository
        uses: actions/checkout@v3

      - name: Security Test -- Setup Node
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: ${{ env.NODE_VERSION }}

      - name: Documentation Test -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Security Test -- Install Node Modules
        run: |
          npm install

      - name: Security Test -- Dependency Audit
        run: |
          npm run security

      - name: Security Test -- Run Gitleaks
        uses: zricethezav/gitleaks-action@v1.6.0

      - name: Security Test -- Report Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: security checks failed!"

  shellcheck_test:
    runs-on: ubuntu-latest

    steps:
      - name: Shellcheck -- Checkout Repository
        uses: actions/checkout@v3

      - name: Shellcheck -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Shellcheck -- Check Scripts
        run: |
          shellcheck .github/scripts/*.sh

      - name: Shellcheck -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: shellcheck checks failed!"

  smoke_tests_production:
    needs: [deploy_production]

    runs-on: ubuntu-latest
    steps:
      - name: Smoke Test Production -- Checkout Repository
        if: github.ref == 'refs/heads/production'
        uses: actions/checkout@v3

      - name: Smoke Test Production -- Setup Node
        if: github.ref == 'refs/heads/production'
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: ${{ env.NODE_VERSION }}

      - name: Smoke Test Production -- Setup Environment
        if: github.ref == 'refs/heads/production'
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Smoke Test Production -- Install Node Modules
        if: github.ref == 'refs/heads/production'
        run: |
          npm install

      - name: Smoke Test Production -- Append Production Environment Content
        if: github.ref == 'refs/heads/production'
        run: |
          echo "${PRODUCTION_ENVIRONMENT_CONTENT}" > .env.local
        env:
          PRODUCTION_ENVIRONMENT_CONTENT: ${{ secrets.PRODUCTION_ENVIRONMENT_CONTENT }}

      - name: Smoke Test Production -- Generate Cypress Environment
        if: github.ref == 'refs/heads/production'
        run: |
          npm run smoke:env

      - name: Smoke Test Production -- Run Cypress
        if: github.ref == 'refs/heads/production'
        run: |
          npm run smoke:run

      - name: Smoke Test Production -- Report Job Status on Success
        if: github.ref == 'refs/heads/production'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: smoke test passed for https://${PRODUCTION_NETLIFY_NAME}.netlify.app"

      - name: Smoke Test Stage -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: smoke test failed for https://${PRODUCTION_NETLIFY_NAME}.netlify.app!"

  smoke_tests_development:
    runs-on: ubuntu-latest

    steps:
      - name: Smoke Test Development -- Checkout Repository
        uses: actions/checkout@v3

      - name: Smoke Test Development -- Setup Node
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: ${{ env.NODE_VERSION }}

      - name: Smoke Test Development -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Smoke Test Development -- Install Node Modules
        run: |
          npm install

      - name: Smoke Test Development -- Append CI Environment Content
        run: |
          echo "${CI_ENVIRONMENT_CONTENT}" > .env.local
        env:
          CI_ENVIRONMENT_CONTENT: ${{ secrets.CI_ENVIRONMENT_CONTENT }}

      - name: Smoke Test Development -- Spawn Dev Server
        run: |
          npm run dev > development.server.log &

      - name: Smoke Test Development -- Generate Cypress Environment
        run: |
          npm run smoke:env

      - name: Smoke Test Development -- Run Cypress
        run: |
          npm run smoke:run

      - name: Smoke Test Development -- Display Server Logs on Failure
        if: failure()
        run: |
          cat development.server.log

      - name: Smoke Test Development -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: smoke test failed for smoke test failed for the development environment!"

  smoke_tests_stage:
    needs: [deploy_stage]

    runs-on: ubuntu-latest
    steps:
      - name: Smoke Test Stage -- Checkout Repository
        if: github.ref == 'refs/heads/master'
        uses: actions/checkout@v3

      - name: Smoke Test Stage -- Setup Node
        if: github.ref == 'refs/heads/master'
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: ${{ env.NODE_VERSION }}

      - name: Smoke Test Stage -- Setup Environment
        if: github.ref == 'refs/heads/master'
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Smoke Test Stage -- Install Node Modules
        if: github.ref == 'refs/heads/master'
        run: |
          npm install

      - name: Smoke Test Stage -- Append Stage Environment Content
        if: github.ref == 'refs/heads/master'
        run: |
          echo "${STAGE_ENVIRONMENT_CONTENT}" > .env.local
        env:
          STAGE_ENVIRONMENT_CONTENT: ${{ secrets.STAGE_ENVIRONMENT_CONTENT }}

      - name: Smoke Test Stage -- Generate Cypress Environment
        if: github.ref == 'refs/heads/master'
        run: |
          npm run smoke:env

      - name: Smoke Test Stage -- Run Cypress
        if: github.ref == 'refs/heads/master'
        run: |
          npm run smoke:run

      - name: Smoke Test Stage -- Report Job Status on Success
        if: github.ref == 'refs/heads/master'
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: smoke test passed for https://${STAGE_NETLIFY_NAME}.netlify.app"

      - name: Smoke Test Stage -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: smoke test failed for https://${STAGE_NETLIFY_NAME}.netlify.app!"

  start_notification:
    runs-on: ubuntu-latest

    steps:
      - name: Start -- Checkout Repository
        uses: actions/checkout@v3

      - name: Start -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Start -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: workflow has started!"

      - name: Start -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  success_notification:
    needs:
      [
        architecture,
        build,
        lint,
        security_test,
        shellcheck_test,
        smoke_tests_development,
        start_notification,
        type_validation,
        workflow_lint_test,
      ]

    runs-on: ubuntu-latest

    steps:
      - name: Success -- Checkout Repository
        uses: actions/checkout@v3

      - name: Success -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Success -- Report Job Status on Success
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: all checks were successful!"

      - name: Success -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: error reporting job status!"

  type_validation:
    runs-on: ubuntu-latest

    steps:
      - name: Type Validation -- Checkout Repository
        uses: actions/checkout@v3

      - name: Type Validation -- Setup Node
        uses: actions/setup-node@v3
        with:
          cache: "npm"
          node-version: ${{ env.NODE_VERSION }}

      - name: Type Validation -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Type Validation -- Install Node Modules
        run: |
          npm install

      - name: Type Validation -- Compile Typescript
        run: |
          npm run compile

      - name: Type Validation -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: type validation failed!"

  workflow_lint_test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:
      - name: Workflow Lint -- Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Workflow Lint -- Checkout Repository
        uses: actions/checkout@v3

      - name: Workflow Lint -- Setup Environment
        run: |
          source ./.github/scripts/setup.sh
          pip install yamllint
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Workflow Lint -- Run Linter
        run: |
          yamllint ./.github/workflows -c .yamllint.yml -f standard

      - name: Workflow Lint -- Report Job Status on Failure
        if: failure()
        run: |
          ./.github/scripts/notifications.sh "${NOTIFICATION}" ":x: workflow linting has failed!"
