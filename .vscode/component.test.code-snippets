{
  // Place your top20-nextjs workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Test Component": {
    "prefix": "test-component",
    "body": [
      "/* Chakra Components */",
      "import { Container } from \"@chakra-ui/react\";",
      "",
      "jest.mock(\"@chakra-ui/react\", () => {",
      "\tconst {",
      "\t\tfactoryInstance,",
      "\t} = require(\"./src/tests/fixtures/mock.chakra.react.factory.class\");",
      "\treturn createChakraMock([\"Container\"]);",
      "});",
      "",
      "",
      "/* Testing Library */",
      "import { render, screen, within, fireEvent } from \"@testing-library/react\";",
      "",
      "/* Mock Hooks */",
      "import mockAnalyticsHook from \"./src/hooks/tests/analytics.mock.hook\";",
      "import mockColourHook from \"./src/hooks/tests/colour.hook.mock\";",
      "",
      "jest.mock(\"./src/hooks/colour\", () => {",
      "\treturn () => mockColourHook;",
      "});",
      "",
      "jest.mock(\"./src/hooks/analytics\", () => {",
      "\treturn () => mockAnalyticsHook;",
      "});",
      "",
      "/* Test Helpers */",
      "import checkMockCall from \"./src/tests/fixtures/mock.component.call\";",
      "",
      "/* My own Components */",
      "",
      "import ButtonWithoutAnalytics from \"./src/components/button/button.base/button.base.component\";",
      "",
      "jest.mock(\"./src/components/button/button.base/button.base.component\", () =>",
      "\tcreateMockedComponent(\"ButtonWithoutAnalytics\")",
      ");",
      "",
      "const createMockedComponent = (name: string) => {",
      "\tconst {",
      "\t\tfactoryInstance,",
      "\t} = require(\"./src/tests/fixtures/mock.component.children.factory.class\");",
      "\treturn createChakraMock(name);",
      "};",
      "",
      "/* Component Under Test */",
      "import (ReplaceMe), {",
      "\ttestIDs,",
      "\t(ReplaceMeInterface),",
      "} from \"../(ReplaceMe).component\";",
      "",
      "/* Support Types */",
      "import type {",
      "\td3Node,",
      "\tSunBurstDrawerNodeComponentProps,",
      "} from \"./src/types/clients/api/lastfm/sunburst.types\";",
      "",
      "",
      "",
      "describe(\"(ReplaceMe)\", () => {",
      "\tlet currentProps: (ReplaceMeInterface);",
      "",
      "\tbeforeEach(() => {",
      "\t\tjest.clearAllMocks();",
      "\t});",
      "",
      "\tconst createProps = () =>",
      "\t\t(currentProps = {}",
      "\t\t});",
      "",
      "\tconst arrange = () => {",
      "\t\tcreateProps();",
      "\t\trender(<(ReplaceMe) {...currentProps} />);",
      "\t};",
      "",
      "\tconst commonPropsTest = () => {",
      "\t\tdescribe(\"should call the Container component correctly\" ,() => {",
      "\t\t\texpect(Container).toBeCalledTimes(1)",
      "\t\t\tcheckMockCall(Container, {}, 0, [])",
      "\t\t})",
      "\t}",
      "",
      "\t/* Scenarios */",
      "",
      "\tdescribe(\"scenario 1\", () => {});",
      "",
      "\tdescribe(\"scenario 2\", () => {});",
      "",
      "\tdescribe(\"scenario 3\", () => {});",
      "",
      "});",
      ""
    ],
    "description": "Test a react functional component."
  },
  "Test Class": {
    "prefix": "test-class",
    "body": [
      "import CLASS from \"../file.with.class\";",
      "",
      "describe(CLASS.name, () => {",
      "\tlet instance: CLASS;",
      "\tlet arg1: string;",
      "",
      "\tbeforeEach(() => jest.clearAllMocks());",
      "",
      "\tconst arrange = () => (instance = new CLASS(arg1));",
      "",
      "\tdescribe(\"when initialized\", () => {",
      "\t\tbeforeEach(() => arrange());",
      "",
      "\t\tdescribe(\"method1\", () => {",
      "\t\t\tlet result: string;",
      "",
      "\t\t\tbeforeEach(() => (result = instance.method1()));",
      "",
      "\t\t\tit(\"should return the correct result\", () => {",
      "\t\t\t\texpect(result).toBe(\"some value\");",
      "\t\t\t});",
      "\t\t});",
      "",
      "\t\tdescribe(\"method2\", () => {",
      "\t\t\tlet result: string;",
      "",
      "\t\t\tbeforeEach(() => (result = instance.method2()));",
      "",
      "\t\t\tit(\"should return the correct result\", () => {",
      "\t\t\t\texpect(result).toBe(\"some value\");",
      "\t\t\t});",
      "\t\t});",
      "\t});",
      "});",
      ""
    ],
    "description": "Test a non-react javascript class."
  },
  "Test Function for Component": {
    "prefix": "test-func",
    "body": [
      "const check${1:COMPONENT}Component = () => {",
      "\t\tit(\"should call the ${1:COMPONENT} component correctly\", () => {",
      "\t\t\texpect(${1:COMPONENT}).toBeCalledTimes(1);",
      "\t\t\tcheckMockCall($1, {}, 0, []);",
      "\t\t});",
      "\t};"
    ]
  }
}
